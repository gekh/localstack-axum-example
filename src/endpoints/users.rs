use axum::{
    extract::{Path, Query},
    http::StatusCode,
    response::Json,
};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Clone)]
pub struct User {
    pub id: u32,
    pub name: String,
    pub email: String,
}

#[derive(Deserialize)]
pub struct CreateUserRequest {
    pub name: String,
    pub email: String,
}

#[derive(Deserialize)]
pub struct UsersQuery {
    pub limit: Option<u32>,
    pub offset: Option<u32>,
}

#[derive(Serialize)]
pub struct UsersResponse {
    pub users: Vec<User>,
    pub total: usize,
}

// In a real application, this would be a database
// For demo purposes, we'll simulate some users
fn get_mock_users() -> Vec<User> {
    vec![
        User {
            id: 1,
            name: "Alice Johnson".to_string(),
            email: "alice@example.com".to_string(),
        },
        User {
            id: 2,
            name: "Bob Smith".to_string(),
            email: "bob@example.com".to_string(),
        },
        User {
            id: 3,
            name: "Carol Davis".to_string(),
            email: "carol@example.com".to_string(),
        },
    ]
}

pub async fn get_users(
    Query(params): Query<UsersQuery>,
) -> Result<Json<UsersResponse>, StatusCode> {
    let users = get_mock_users();
    let limit = params.limit.unwrap_or(10) as usize;
    let offset = params.offset.unwrap_or(0) as usize;

    let paginated_users: Vec<User> = users.into_iter().skip(offset).take(limit).collect();

    let response = UsersResponse {
        total: paginated_users.len(),
        users: paginated_users,
    };

    Ok(Json(response))
}

pub async fn get_user_by_id(Path(id): Path<u32>) -> Result<Json<User>, StatusCode> {
    let users = get_mock_users();

    match users.into_iter().find(|user| user.id == id) {
        Some(user) => Ok(Json(user)),
        None => Err(StatusCode::NOT_FOUND),
    }
}

pub async fn create_user(Json(payload): Json<CreateUserRequest>) -> Result<Json<User>, StatusCode> {
    // In a real application, you would save to a database
    let new_user = User {
        id: 999, // This would be auto-generated by the database
        name: payload.name,
        email: payload.email,
    };

    Ok(Json(new_user))
}
